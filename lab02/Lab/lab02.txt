== Question 1: Searching a Dictionary with Less == 

a) What word is on line 2000 

Less keystrokes: 2000G
Word:Algonquian

b) the first word in the dictionary file containing z

Less keystrokes: /z
Word: Abkhaz

c) the last word in the dictionary that contains the substring ooz ?

Less keystrokes:/ooz and then G and then b a few times
Word:zoozoos


== Question 2: Applying  Unix Tools to a Dictionary == 

a) How many total words does the file contain?  

Command: wc -w words.txt
Answer: 390582

b) How many total words, excluding those ending in "'s", are there in the dictionary?

Pipeline: egrep -v "'s$" words.txt | wc -w
Answer: 299845

c) How could you use cat -n and grep to find out which word is on line 100000? 

Pipeline: cat -n 100000 words.txt | egrep "100000"
Answer: adviser

d) How could you use cat -n and grep to print the 700th line, and no other lines?

Pipeline: cat -n words.txt | egrep "   700"
Answer: Adirondack


e) How do you use head and tail to find out what word is on line 200000 

Pipeline: head -n 200000 words.txt | tail -n 1
Answer: geodynamic's

== Question 3: Finding Unusual Words With Regular Expressions == 

a) which words contain the characters "lmn" consecutively?

Pipeline: egrep "lmn" words.txt
Answer: 
Selmner
Selmner's
almner
almners
calmness
calmness's
calmnesses


b) how many words contain "zz", but do not end in apostrophe-s ('s)?

Pipeline: egrep -v "'s$" words.txt | egrep "zz" | wc -w
Answer: 628

c) how many words contain four consecutive vowels?

Pipeline: egrep [aeiouAEIOU]{4} words.txt | wc -w
Answer: 207

d) which English words contain all 5 english vowels "aeiou" in that order? 
abstemious
abstemiously
abstemiousness
abstemiousness's
abstemiousnesses
abstentious
adenocarcinomatous
adventitious
adventitiously
adventitiousness

Pipeline: egrep ".*[a].*[e].*[i].*[o].*[u].*" words.txt | wc -w

e) how many English words contain all 5 english vowels "aeiou" in that order? 53

Pipeline: egrep ".*[a].*[e].*[i].*[o].*[u].*" words.txt | wc -w
Answer: 53

f) Challenge which English words contain exactly 5 vowels and the vowels are "aeiou" in that order? 

Pipeline: egrep "^[^aeiou]*a{1}[^aeiou]*e{1}[^aeiou]*i{1}[^aeiou]*o{1}[^aeiou]*u{1}[^aeiou]*$" words.txt
Answer: 
abstemious
abstemiously
abstentious
arsenious
caesious
facetious
facetiously

egrep "^[a-z]{9}$" words.txt

g) How many 10+ letter lower case words which contain a 9 character lower-case word.

Pipeline: fgrep -f words9.txt words.txt | egrep "^[a-z]*$" | wc -w
Answer: 66265

== Question 4: egreping MPs == 

a) Write an egrep command that will print all the lines in the file where the electorate begins with W.

Pipeline: egrep "Member for W"

b) Write an egrep command that will list all the lines in the file where the MP's first name is Andrew. 

Pipeline: egrep "^Mr Andrew|Dr Andrew" parliament.txt

c) Write an egrep command that will print all the lines in the file where the MP's surname (last name) ends in the letter 'y'.

Pipeline: egrep "y:" parliament.txt

d) Write an egrep command that will print all the lines in the file where the last name and electorate ends in the letter 'y'.

Pipeline:egrep "y:" parliament.txt | egrep "y,"

e) Write an egrep command that will print all the lines in the file where the last name or electorate ends in the letter 'y'.

Pipeline:egrep "y:|y," parliament.txt

f) Write an egrep command to print all the lines in the file where there is a word in the MP's name or the electorate name ending in ng.

Pipeline:egrep "ng:|ng," parliament.txt

g) Write an egrep command that will print all the lines in the file where the MP's surname (last name) both begins and ends with a vowel. 

Pipeline: egrep " [AEIOU]\w*[aeiou]:" parliament.txt

h) Write an egrep command that will print all the lines in the file where the electorate name contains multiple words (separated by spaces or hyphens). 

Pipeline: egrep "Member for \w*[ -]\w*" parliament.txt
Answer:

== Question 5: Pipelining MPs == 

a) Write a shell pipeline which prints the 8 Australians states & territory
in order of the number of MPs they have. 

Pipeline: cut -d',' -f2 parliament.txt | sort | uniq -c | sort -n

b) Challenge: write a shell pipeline which prints the 2nd most common MP first name. 

Pipeline: cut -d' ' -f2 parliament.txt | sort | uniq -c | sort -r | head -n2 | tail -n1 | sed 's/^ *[0-9]* //'
Answer: Tony

== Question 6: Counting Classes ==

a) How many total classes are there?

Command: wc -w classes.txt

b) How many different courses have classes?

Pipeline: cut -f1 classes.txt | sort | uniq | wc -w 


c) Write a pipeline which will print the course with the most classes?

Pipeline: cut -f1 classes.txt | sort | uniq -c | sort -n | tail -n1

d) Give a command line that prints the most frequently-used tut room? 

Pipeline: egrep "TUT|TLB" classes.txt | cut -f5 | sort | uniq -c | sort -n | tail -n1

e) Give a command line that prints the most popular time-of-day for tutes? 

Pipeline: egrep "TUT|TLB" classes.txt | cut -f4 | cut -c5-9 | sort | uniq -c | sort -n | tail -n1

f)  Challenge: which COMP courses run the most simultaneous classes of the same type? 
Idea:
cut first column and cut the column with the day and time
egrep "^COMP" classes.txt | uniq -c | cut -f1,4,5 | egrep "   1" | uniq 
egrep "^COMP" classes.txt | uniq | cut -f1,3,4,5 | egrep "COMP" | uniq -c | egrep "   1" | cut -f1,3 | sort -k2 | uniq -c | egrep "   2"
Pipeline: egrep "^COMP" classes.txt | uniq -c | egrep "   1" | cut -f1,3,4 | uniq -c | egrep "   2" | cut -f1 | uniq | cut -f1

g) Challenge: write a pipeline that prints list of the course names (only) of COMP courses that run simultaneous classes of the same type?

Pipeline: egrep "^COMP" classes.txt | uniq -c | egrep "   1" | cut -f1,3,4 | uniq -c | egrep "   2" | cut -f1 | uniq | egrep " COMP" | sed 's/^ *[0-9]* /''/' | sed 's/^ *[0-9]* //'

== Question 7: Challenge - Interesting Regexps ==

a) Match any line containing at least one A and at least one B.

Regexp: egrep "A[^B]*B|B[^A]*A" < file1

b) Match any line any line containing only the characters A and B such that all pairs of adjacent As occur before any pairs of adjacent Bs

Regexp: egrep -v "BB[AB]*AA" < file2

c) Match any line containing  only the characters A and B such that all number of A's is divisible by 4.

Regexp: 

d) Match any line containing n As followed by n Bs and no other characters..

Regexp/script:


